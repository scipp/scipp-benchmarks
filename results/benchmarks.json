{
    "bin.Bin1d.time_bin_table": {
        "code": "class Bin1d:\n    def time_bin_table(self, nbin):\n        make_binned(self.table, edges=[self.x])\n\n    def setup(self, nbin):\n        self.table = sc.data.table_xyz(50_000_000)\n        self.x = sc.linspace(dim='x', start=0, stop=1, num=nbin + 1, unit='m')",
        "min_run_count": 2,
        "name": "bin.Bin1d.time_bin_table",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768",
                "65536",
                "131072",
                "262144",
                "524288"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "f2e8b7683e6f274b5c269ec1c7a174683ff1e5473dce21dc0d446fbd5611fa96",
        "warmup_time": -1
    },
    "bin.Bin2dRebinLongDim.time_outer": {
        "code": "class Bin2dRebinLongDim:\n    def time_outer(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da, edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()",
        "min_run_count": 2,
        "name": "bin.Bin2dRebinLongDim.time_outer",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "1db06b58771967cf21e92bf8379883351566a21bf2c9d58e770cdd72f76b0e8c",
        "warmup_time": -1
    },
    "bin.Bin2dRebinLongDim.time_outer_transposed": {
        "code": "class Bin2dRebinLongDim:\n    def time_outer_transposed(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da.transpose(), edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()",
        "min_run_count": 2,
        "name": "bin.Bin2dRebinLongDim.time_outer_transposed",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "e3ff4414681f32b14c9786f7a99dc590aef5ee4c8fa523862e0c0942729a800b",
        "warmup_time": -1
    },
    "bin.Bin2dRebinLongDim.time_outer_transposed_copied": {
        "code": "class Bin2dRebinLongDim:\n    def time_outer_transposed_copied(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da_transposed, edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()",
        "min_run_count": 2,
        "name": "bin.Bin2dRebinLongDim.time_outer_transposed_copied",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "85fba314140d0326d27e2598f5b3e5f065bb19a10e6af335f7a3cd449dd6f44e",
        "warmup_time": -1
    },
    "bin.Group1d.time_group": {
        "code": "class Group1d:\n    def time_group(self, nevent, ngroup):\n        self.table.group(self.groups)\n\n    def setup(self, nevent, ngroup):\n        self.table = sc.data.table_xyz(nevent)\n        self.table.coords['group'] = (ngroup * self.table.coords['x']).to(dtype='int64')\n        del self.table.coords['x']\n        self.contiguous_groups = sc.arange('group', ngroup, unit='m')\n        self.groups = sc.arange('group', ngroup, unit='m')\n        self.groups.values[0] = 1\n        self.groups.values[1] = 0",
        "min_run_count": 2,
        "name": "bin.Group1d.time_group",
        "number": 0,
        "param_names": [
            "nevent",
            "ngroup"
        ],
        "params": [
            [
                "1000",
                "1000000",
                "10000000",
                "100000000"
            ],
            [
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768",
                "65536",
                "131072",
                "262144",
                "524288"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "92bd32fb3f82d9d30f645d952c8063a3110ad25cdc67917cd7bd37f8c1f962e6",
        "warmup_time": -1
    },
    "bin.Group1d.time_group_contiguous": {
        "code": "class Group1d:\n    def time_group_contiguous(self, nevent, ngroup):\n        self.table.group(self.contiguous_groups)\n\n    def setup(self, nevent, ngroup):\n        self.table = sc.data.table_xyz(nevent)\n        self.table.coords['group'] = (ngroup * self.table.coords['x']).to(dtype='int64')\n        del self.table.coords['x']\n        self.contiguous_groups = sc.arange('group', ngroup, unit='m')\n        self.groups = sc.arange('group', ngroup, unit='m')\n        self.groups.values[0] = 1\n        self.groups.values[1] = 0",
        "min_run_count": 2,
        "name": "bin.Group1d.time_group_contiguous",
        "number": 0,
        "param_names": [
            "nevent",
            "ngroup"
        ],
        "params": [
            [
                "1000",
                "1000000",
                "10000000",
                "100000000"
            ],
            [
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768",
                "65536",
                "131072",
                "262144",
                "524288"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "6d5db53e783b888bf5ad6acebc431792b8eeb52cb8686f8043f44b0e5342a20c",
        "warmup_time": -1
    },
    "binned.Binned1d.time_bins_concat": {
        "code": "class Binned1d:\n    def time_bins_concat(self, nevent, nbin):\n        self.da.bins.concat('x')\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)",
        "min_run_count": 2,
        "name": "binned.Binned1d.time_bins_concat",
        "number": 0,
        "param_names": [
            "nevent",
            "nbin"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "58c2343f62de1ac6146796595db09fec02bea13031193a0dc2db479eda0f2f16",
        "warmup_time": -1
    },
    "binned.Binned1d.time_bins_constituents": {
        "code": "class Binned1d:\n    def time_bins_constituents(self, nevent, nbin):\n        self.da.bins.constituents\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)",
        "min_run_count": 2,
        "name": "binned.Binned1d.time_bins_constituents",
        "number": 0,
        "param_names": [
            "nevent",
            "nbin"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "750e40adcdd72cc2ba4061a49ec5082369d1e0007cf4a6fa4c0ffa95c415c3a5",
        "warmup_time": -1
    },
    "binned.Binned1d.time_bins_mean": {
        "code": "class Binned1d:\n    def time_bins_mean(self, nevent, nbin):\n        self.da.bins.sum()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)",
        "min_run_count": 2,
        "name": "binned.Binned1d.time_bins_mean",
        "number": 0,
        "param_names": [
            "nevent",
            "nbin"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a4fd83ba82fac7a334c9382b83a22ef41dfbd5af0fcc407dabcbde58e122c5e1",
        "warmup_time": -1
    },
    "binned.Binned1d.time_bins_size": {
        "code": "class Binned1d:\n    def time_bins_size(self, nevent, nbin):\n        self.da.bins.size()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)",
        "min_run_count": 2,
        "name": "binned.Binned1d.time_bins_size",
        "number": 0,
        "param_names": [
            "nevent",
            "nbin"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2bb7233e85b8bd6176ab5bb5bf778a5a2cffe8744976d46fc4daa774e164676d",
        "warmup_time": -1
    },
    "binned.Binned1d.time_bins_sum": {
        "code": "class Binned1d:\n    def time_bins_sum(self, nevent, nbin):\n        self.da.bins.sum()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)",
        "min_run_count": 2,
        "name": "binned.Binned1d.time_bins_sum",
        "number": 0,
        "param_names": [
            "nevent",
            "nbin"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3998bb34213db7e17d90d3fe088ea8ac4f40755facef0382b95bd2cac9de4822",
        "warmup_time": -1
    },
    "binned.Binned2dConcat.time_bins_concat": {
        "code": "class Binned2dConcat:\n    def time_bins_concat(self, nbin):\n        self.da.bins.concat('x')\n\n    def setup(self, nbin):\n        nx = 100000\n        binned = sc.data.binned_x(nevent=2 * nx, nbin=nx)\n        y = sc.linspace(dim='y', start=0, stop=1, num=nbin + 1, unit='m')\n        self.da = make_binned(binned, edges=[y])",
        "min_run_count": 2,
        "name": "binned.Binned2dConcat.time_bins_concat",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "1fa0539c5e163c0e7bb178b1629a5be1eace65f92b465df93aec2a99b452e66b",
        "warmup_time": -1
    },
    "binned.Binned2dConcatInner.time_bins_concat_long_outer": {
        "code": "class Binned2dConcatInner:\n    def time_bins_concat_long_outer(self, nbin):\n        self.da.bins.concat('y')\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])",
        "min_run_count": 2,
        "name": "binned.Binned2dConcatInner.time_bins_concat_long_outer",
        "number": 0,
        "param_names": [
            "nbin"
        ],
        "params": [
            [
                "1024",
                "2048",
                "4096",
                "8192",
                "16384",
                "32768"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300.0,
        "type": "time",
        "unit": "seconds",
        "version": "d8550afeba7f4310e732bc4dbac947dacaec5a77d5ea60958843557342b198b3",
        "warmup_time": -1
    },
    "binned.Lookup.time_create_bool": {
        "code": "class Lookup:\n    def time_create_bool(self):\n        self.hist_bool.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_bool, 'x')\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_create_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e766436c1c68f14d3ba87fb6a6ca4560323ee5caefee4ff30f8db8b310160281",
        "warmup_time": -1
    },
    "binned.Lookup.time_create_float64": {
        "code": "class Lookup:\n    def time_create_float64(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_float, 'x')\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_create_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ed7cbc11f1e0fe281eb57c30bd75d40e31b0ea293c848af513bc890b744aa953",
        "warmup_time": -1
    },
    "binned.Lookup.time_create_int64": {
        "code": "class Lookup:\n    def time_create_int64(self):\n        self.hist_int.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_int, 'x')\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_create_int64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7163f2849424cc6f80cea8a15bfa17a37350d2c7fc3b5d8cc0942dcb883e1fe5",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_bool": {
        "code": "class Lookup:\n    def time_map_bool(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_bool, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "51c14006826f9428009f0dfd25371b5857cb59200690df96c0df396f0f49e8bb",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_float64": {
        "code": "class Lookup:\n    def time_map_float64(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_float, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3906de9c14c5b3e2394ce462554672f756c79b80b59385824ea2dd1942465759",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_int64": {
        "code": "class Lookup:\n    def time_map_int64(self):\n        self.hist_int.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_int, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_int64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "53cd30b5b6bad73e6634e8f749544d147fb247936de229deb057c843c9a595cd",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_linspace_bool": {
        "code": "class Lookup:\n    def time_map_linspace_bool(self):\n        sc.lookup(self.hist_bool, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_linspace_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "70bc53b17408d38f971ddb654777b6555253d24148bde2b305ae0f77aface541",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_linspace_float64": {
        "code": "class Lookup:\n    def time_map_linspace_float64(self):\n        sc.lookup(self.hist_float, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_linspace_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b9463acb40c7a73a8cb638cc07eacb3ba38b054d1a6f6e319065757510871fbc",
        "warmup_time": -1
    },
    "binned.Lookup.time_map_linspace_int64": {
        "code": "class Lookup:\n    def time_map_linspace_int64(self):\n        sc.lookup(self.hist_int, 'x')[self.binned_x]\n\n    def setup(self):\n        self.binned_x = sc.data.binned_x(100_000_000, 10000).bins.coords['x']\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})",
        "min_run_count": 2,
        "name": "binned.Lookup.time_map_linspace_int64",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bbc2db1dcd9c5cef065df6682e098259f307051d9412ca93edc2f32a86ecf5fd",
        "warmup_time": -1
    },
    "variable.Variable.time_deep_copy": {
        "code": "class Variable:\n    def time_deep_copy(self):\n        self.var1.copy()\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])",
        "min_run_count": 2,
        "name": "variable.Variable.time_deep_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e8d07ae15799fc765744c9b499c153a20769e8a2e9211ba350432d54ef3f8377",
        "warmup_time": -1
    },
    "variable.Variable.time_shallow_copy": {
        "code": "class Variable:\n    def time_shallow_copy(self):\n        self.var1.copy(deep=False)\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])",
        "min_run_count": 2,
        "name": "variable.Variable.time_shallow_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "834ba6db7f3808ba6ba4c6c9675ee517874b3cede7bbc4655c0163483f650689",
        "warmup_time": -1
    },
    "variable.Variable.time_variable_inplace_operation": {
        "code": "class Variable:\n    def time_variable_inplace_operation(self):\n        self.var1 += self.var2\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])",
        "min_run_count": 2,
        "name": "variable.Variable.time_variable_inplace_operation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e0a2175047c37cce1ece6d7212dc1815784c3d8c33009b768f16c9ddd57b394d",
        "warmup_time": -1
    },
    "variable.Variable.time_variable_non_inplace_operation": {
        "code": "class Variable:\n    def time_variable_non_inplace_operation(self):\n        self.var1 + self.var2\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])",
        "min_run_count": 2,
        "name": "variable.Variable.time_variable_non_inplace_operation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "590cde73c39ca2fc0ad1ca736a819ef4714a68013b7687dc2c390a6a2ce54af0",
        "warmup_time": -1
    },
    "version": 2
}