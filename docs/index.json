{"project": "Scipp", "project_url": "https://scipp.github.io/", "show_commit_url": "http://github.com/scipp/scipp/commit/", "hash_length": 8, "revision_to_hash": {"124": "89ea7a88d8339e2a95c1fb817a173614f210db1e", "320": "4c2e152203571fdb3bbfe67a5fe9fe176c0c7574", "1625": "ca957f2beeb492778028a79d1f56cc332d82e835", "3242": "ba05fb04aa4137829f033ba12a5eb80e57653b19", "3390": "4623f7631c3a727e1b26dceaaa461b8d7db565f2", "3395": "875345701a235cd51b0694725a77015f6157f108", "4861": "5a55df58a7a8dba7feb1c195297aa97712b5bd15", "5946": "dbb3ac60a2f3e773531e145c363f62a793cd7d63", "5956": "d21d44822c82f96f6f9532bd2ede559e0733000a", "7040": "e011204ccf98ed23f45f9ccb1df068cd39bf5826", "9530": "5f1d9010f54bd57bc9c566607167c5d5393327de", "10574": "006091fcd68246d8a85e5295730745cd3f842663", "11257": "75d2704c810cf9b4f3aea5e3940d67fc022188d8", "11677": "bf4ee0886a17b8aaf0df858de5b8ea10ff0a48c3", "12106": "9a3840d0209a02e5d7ab900637320ea5172260e9", "12695": "80d2b7810b9824459ab08fe88cc589609ee7eda0", "12908": "7d009dfe793203147d8f0b47eb98b8b81972f5e8", "13422": "b5c1c33773ceca0c87902c6d2df7dcd14c8b2982", "13427": "55b01df9a62f373b3873e3f479fbcaff49839ed8", "13454": "d36e2ee982abc3ccb002ad8196f030cf88abebe4", "13485": "163c3c663149e9af23a8cff9d50b37f79aa92f84", "13487": "7e607e1cb2126ba5c7f411e72366c08f6e34d71b", "13504": "ae5db1fe1cdbe05f79dbcc5f7faa0648fdaa0da0", "13701": "06545cb299ea0f75cdb6d773850dcdc9538b7d7f", "13738": "7d220ecacbb113036190133b8b7c6d77ee2a83ef", "13743": "7a54b29e0122b9fe3550cd36e779bcda0b39cee1", "13750": "3d89e14e97f2c0a345261de30e8550e0d4b14edf", "13760": "811aa16fc479e32e7e846bdd68262ef8a2576a11", "13762": "a0d83e64c598d577711977c2665d60344eb5abba", "13784": "6e27f503e1915bbb3b59a2e0a33f9a6cc26336f8", "13812": "0e4877ab4aa9e2ba0d1010d3819efb11dc05dc23", "13825": "35ad9bb902a2fe4172fdfa256a48a67578b5cc4a", "13836": "67cb47c2e5f3dff72663ef82ae0ab6172da4d119", "13843": "1ccd5865ead57731d9db76d85d11b95a3ccf4020", "13853": "37819e456aec11477b8a65411a8706ab04f4274c", "13856": "8dcd939b7ac131470e9d54cfa2ac17e3ee803ba6", "13872": "517a2c2fd0e552c6ebf18afa0460a6aaade8aada", "13873": "decbb1d4cffce251008358fca96d31442dc94749", "13875": "dcafd59f1ee00966a470f9511e4f5f8a830904c5", "13882": "a08ae0cce48f0069c1fbfaf649fc8a4d5f1db1da", "13883": "6b8049af793385383ef8f28b5c1b215d76423eaa", "13901": "f97b0621c0dead5084b563b1e76f53f658c2a86c", "13904": "a66f4a03d340990543114f77998c68ecc6fab83e", "13908": "861a95765fbb5a1adc8fd1fa1dbab5375eddee5e", "13909": "3d94c1c9da9f6e6860f862b8ae78c3b138672e16", "13935": "56913315866b77f06e3bb021d9611723c59ad373", "13950": "f14f56ed19cccb4162d55b1123df7225eeedb395", "13954": "e08aeaa2c09fb58c94eb3399bc2f8b414dd1ff09", "13978": "ab235f2f6e1c6ca21dbfb0fd00e5e1e1ed22f5c1", "13985": "21643e72ef353355063cd7946e0f4e7ed7cd0fbd", "14016": "3b03f53b1a9d4d8ea62d938667cbfed2fe87768a", "14030": "e7b0d7de23bbba6d9c8dc2b62637ff10e920331b", "14031": "d1f2497971b9fb706fbfcf1101ed07fea6a230ea", "14044": "d7520ca4c9e6cb3ebf9d6dfe98195dadcab60ed5", "14050": "02df6a2bd4b3af06ce46345cd00c1685f52448d6", "14069": "f323f55c04a2a94055274530992f72bd54f51cf1", "14102": "5200ea643f263c20ccf387b48b815f50a4742bf9", "14103": "b1c018794eeaa467235c38346c2600b6e82fd2bb", "14116": "696dac142fa923e89233c21ca15e51b53a0719ff", "14126": "24e11668e036549bbff5e0140a42b830a6dcccd1", "14130": "7cc11484f677a2970b9bef1131ecd2aa52992690", "14134": "76284fded092c931f293c6e29ddd64a0d984d098", "14136": "db4424d5656a7c5cb817bd1d6e0aace159305f21", "14137": "c7ee1a41f3788ccce28a0bee5613b956ff893b14", "14138": "34fa0e2ac8ab0f45ad8324f755e3239332faef26", "14144": "1118263b1fe94cd6ffa58f968853b7823769491b", "14159": "423f5607d7dd2c6e97bb1f7a29e90c0c9b17f79b", "14163": "6d4191637e0c771508ecef586f3c45e1188cc787", "14171": "428d67bb12d5f03917797f7aa0c5782e39cbd8b0", "14175": "13b45a9af3ad59f8ff210c4866b3163a130b0edb", "14179": "0f804a128b0ed2cf0ca4f3986d339f2ce1d254c2", "14247": "3345a29376d19cadf29e4443a112a25d4f22b143", "14287": "82014afe2e02f10ed67990517a6780694af455c1", "14292": "b6589e0c99361a4d75754beb41d046ab0327961d", "14302": "2908838291f04770b95162bc6816fd77e8b74fd1", "14308": "d08d746463908706ef35b75617c618017a7830a1", "14337": "18287cc718b38f8668a39fc9546e9528aa9b8b20", "14338": "652b9613e87d0647e04f85fc1e82bef3c7d1bb76", "14396": "5ec6563dd7d9cf45d7de26606dc7ae480babe7c1", "14398": "bc789b1bb884294eaadfe2d1cf093f9ddbb565f3", "14413": "93c4aa21f15b7019be99e430c123eb82245ef030", "14466": "ff69aec1f31f7d404c3172c149158d9703174fee", "14505": "2a22266b00714ec72ee57978e3e3527fc5a96bb7", "14511": "7547149ef673b267d48d421d21b886cc1427e7ae", "14516": "d67c90344c925913863c6bd624e33e725f62fc5b", "14571": "5bb0ab0c56c76746018a20762a2dd6f200934379", "14575": "a26b9f4cf3b6a236d79251a5c9f8e64b482cffbd", "14587": "adf6fa00d3cc000689b262024b26052f306d14d3", "14594": "337b2ed42506bd9ce172ade5f1422d3f38cde5c6", "14595": "fd6bf790e214eb6b3313b4e99d316af4cc95d761", "14601": "1f9ab1d32142fa9fbe9f9002139b1b12344a5931", "14616": "28705a207f1e2f41d95fdd532cc0c27ce9b26f5c", "14621": "6a8b2359709b0ad44342db55c57c7d7e03d705c8", "14654": "8fcc581773a5bd0d8609b2f01f27ed9f4e6e1ff6", "14655": "fa281eddf8c750bf4a0946a4f5e0a007c12e89a6", "14718": "69eafe0fcdee49b1d75bbb19d498eae133d95a02", "14741": "0160f5cdd6cc3b8dc2c92909d3731313fa771f40", "14753": "68baa449cf7916b7cce16d190908e590c3e31997", "14755": "0396742017c690bfb8700638292f4c8129796f98", "14768": "ca2872b343161603f88c6d2a37da5bc24178d8e1", "14772": "4fd38aa95ca23e5929344aba008f3a3f01ff74b5", "14781": "f560bf26ede6481474e6c3eeacd10f5913977b03", "14784": "78d5357099ecdd18186886aefdb68291de87665c", "14789": "4db4e42ecacb9462a55d868a56ee8144b82b38f3", "14815": "2a3daa6f5c7b0a8091b15a8f5f32edc17528e64f", "14828": "880a3dd57e41da72e5a645fdd1fa1c0675de6b21", "14859": "2a3d18c379e138ccf7b3bff298097a52cad6156a", "14863": "c830fd6b44341d803d3e98d9eb513260f02b9910", "14865": "7efd221dc0f96e0f2f9b3e116f40423ac43c2486", "14869": "341fbe9980780284ba4cba3aeeada6bb35c78189", "14888": "2bafe5477fad49988e6b011148ebe0c5d632257e", "14891": "f67e7f62de396ee3c74a1d60522ef6fd66c98475", "14942": "1910638b9207dbb052be1915c1cf1b8584b90bba", "14963": "ed18d03a59c59b25c7bd463d94907668c61d5941", "14979": "f8b64dfd9db723ade34379c21f0efc8080da2a56", "14986": "fae45a12b26c1b29e58e8fd62fd996baabf5323a", "15005": "7420920f109c62c7260b72835273da08003c7e49", "15008": "182810c475517214b8d45d0f7db51c7ce57e1687", "15009": "0b63b9d945544d8c2511a0ce97564aa886551138", "15012": "9261b54be8d3adb4a1d0fd38a259a80888df29f4", "15014": "0ae41e00db459671fcf0eac52706d5f7ecac1185", "15018": "3e0928aca128a68c372ae6c946271d46b0c229eb", "15023": "3eac5bb97f4b0d59a928e56f4df54ef6184bd500", "15027": "5f85c0c50e0bd9b24450cf577cb9fdd1ae7a0167", "15039": "3f1933bb1aa683046e33457a5cc0bfb2f23690a9", "15050": "dd2cfb69a6530a3acbc23b4e9032e2eaade3e222", "15061": "e7b7cce7499615994a177c2a622dc8514c9a2cbe", "15086": "d21aa78ad1f8e8d7c2e191a7ce06ae77b81d6d52", "15092": "74af9cd66dd51b0183c2db7f4dfd5548959818a7", "15360": "8a97450e5090131ac324af9025d8e4efd3c25ca6", "15368": "6bdd191d4b23a80761f4cc9135210c25029dca05", "15372": "4013fd65db9e0b099d64b8321e4973939e2013c3", "15374": "be0a9558f26cd64f2854a5a3cbfbfd3968fafbd7", "15375": "a46675680d6aa08e16a22c548006c5d2cd91c4ac", "15376": "75dfd89b1c13ebce045e25db34efc2b6408aa5c2", "15398": "c547431bc5abe8381afc0c72279c3fb15d03893a", "15406": "b6f624c530c3166f9bf2c241c071b62d30d11f72", "15417": "0200be506b5e4fcc6693c78b0023c700ab40da9c", "15423": "3350ab74c10109375c9c4b5d069edd096c6e8396", "15424": "0e8d423183faec8c8a6043df519354ec70358734", "15427": "30452b215fd1191005de4445355fcaa9d72f86c4", "15439": "8a1ed50da5017e8320f9d9c415185a099eb4c44a", "15453": "b3121dd82a2e57bcbcb1386801b547b4682e064e", "15460": "0bd6ff0b9df1ee3e920999e94ac48c454da8e07a", "15465": "6f36323d21dc045a7ad745b8da9ead66f1a0bb98", "15468": "d71285a38e194f4753dff9581dbda550524fd60c", "15475": "8eff0d4b97e2308a951b8a4fb996d2811849c35f", "15481": "27e2480f833c15c2875ce2835c40580103c2eae2", "15487": "27d2c62024960357e37e0f96eba2542e3c3e0350", "15488": "cd5a83e4b58cc98871c001b1d9d5eb4d4c504fee", "15491": "b4f0c2d4c0bb16279d78ba9eabdcf7a4226c0b75", "15539": "f5cc733f73209c67b2a7ed4ef262cb302f2caa85", "15576": "a26469c0f8eb9e6ea7ebf5470ed7809dbd800b54", "15586": "0153d721daaa69c0479c2fadae076adfb6875b49", "15643": "8f429b999a57814bc9d234a95b476743164fa3fc", "15654": "73ebfb071bf2c6461523e7b9b812c3593ce046f0", "15664": "4fc4bb5c32c4fda1c259f76a571da374bfb53fdf", "15665": "b7a291193f172f341e378fb7fa027e4e2ab542fe", "15669": "332d5617d8c53041e153da36466e076c879d9268", "15671": "c04d4876dbc60767c20d11d1ff310270ebf587ed", "15679": "9e5bb764aa2696544a39a783f4dfe645bf15f0ae", "15698": "7f617c04e659625ca86c25b135147f109de2ecc2", "15720": "f305237b3949caffa5f400bb083bea9e2e8d2381", "15739": "7bc56d633763247d6a9729958c6e5d62d8f15d27", "15744": "26648fdcda49b21a7aacdafd58625fab7ee3403b", "15747": "43ece87c963f97d77485ad00a7c9a491a69f6e31", "15795": "c5ff0710696e43cb25b993a36cf0bc3f0f7ddf69", "15799": "45f808a5cc8b5451639c0d1d8fa3548303eff854", "15812": "f74a5589c02a5c049150b96797b5b5b738734be6", "15813": "4aa2ee664f20bbf9979f8cc88bc070fd892e4a9a", "15822": "aa0565dcb918f1b807ac877caba9ae32a90aeb7c", "15829": "847788f7bf835db8b4de06ff35793f0dd86da9f6", "15863": "59513962e8ae1ffdac1e48467dfc71bc20bf05cf", "15899": "266cd915957728ed0e47bb3d659ff410dd17b2d9", "15903": "1997480988124184b75150a2422d44d12944de45", "15914": "8711132523bbcdfdfab2c7f988e296a42dad042c", "15921": "3d821c1ee2b622a92d2cbf1cfea1e77c47851597", "15965": "e13ea7f3d9cf9b6570077e66c7ce1c19c92424b9", "15972": "a2470c42104a7c63743c643e6e37a9ea36418d06", "15975": "84ae23a23c3ef997975d07f88b674ce3fa0bbd39", "15976": "8b20498edfd2aab9bea1d28567c589610298e113", "15978": "49f2f80ac82ec234ec0b8b67e58c041fe902dccd", "15980": "4f6b6ef8dc464b991cac37cf61335e267b8bff8c", "16007": "df7cf6a0665337968f9d60a9ccae4384ed9a52a2", "16012": "ed526278f3753832e2ea86bf4cbc63782c450412", "16013": "14fda01728871334e714b745ff3bc9b132d56154", "16014": "83f8e4330586fffe7a7c19327c9fd074a61f11d3", "16019": "8307ef3a5d77402997211cf74187ccda46ba71e5", "16026": "1fa2ecfd519e762f999df4a312fb4773b4fb723e", "16051": "f408a6d2e8763a5b00d554a2aaf56dd0a28c3ad2", "16055": "372492bbd2bf0c1ea119c26835c750cb15d43a6c", "16058": "587b8c2f5248fa13f93e086eef179cdfe22b313c", "16073": "3a93fa5573a60aed52d3e58fc73258fef55b3b98", "16093": "d8cd5d183488d9f8efcb077d712091837b172546", "16097": "5297b1c59b11326c91c38f9e8ce82c86022c9e25", "16121": "71303175231bb03d9908925503f7d8b6b7c909fa", "16130": "94c59fdb067330019a773e5590e673fe55810d78", "16133": "fb51ef84758a1df32943132067808eac0a53d899", "16135": "472db8c35c47c7f122265d88c7149cceebb551ac", "16137": "774172e9dc494f518729820078c436f1bcd59c0b", "16147": "b826e2b3aee0baacc5ebe75a843d40dbed727c64", "16620": "5178fefc17d54f29acc9b0c3796a841bba935e22", "16948": "09000bc30b18d9f60cd2c23c6abc45eae4096c8a", "16952": "660eb59c7f8c010193803edb3123834cf65ace56", "16967": "7b9a49fee9e28848ab7b33550b9384c9315d1d68", "17117": "4697a7c3c00d105010f6e6eb0fb40811f1ac15e2"}, "revision_to_date": {"124": 1528781367000, "320": 1536217010000, "1625": 1553685126000, "3242": 1568121579000, "3390": 1568800105000, "3395": 1568883142000, "4861": 1576747606000, "5946": 1585226806000, "5956": 1585302237000, "7040": 1594388132000, "9530": 1611812495000, "10574": 1616597571000, "11257": 1619006595000, "11677": 1620795363000, "12106": 1622623406000, "12695": 1625745990000, "12908": 1627897881000, "13422": 1631620211000, "13427": 1631701741000, "13454": 1631882158000, "13485": 1632381161000, "13487": 1632390210000, "13504": 1632764162000, "13701": 1634287482000, "13738": 1634631086000, "13743": 1634723919000, "13750": 1634730485000, "13760": 1634736771000, "13762": 1634739327000, "13784": 1634787861000, "13812": 1634881247000, "13825": 1634898417000, "13836": 1634910524000, "13843": 1634913509000, "13853": 1635149169000, "13856": 1635157324000, "13872": 1635235109000, "13873": 1635240014000, "13875": 1635253737000, "13882": 1635266872000, "13883": 1635309212000, "13901": 1635336087000, "13904": 1635343616000, "13908": 1635412101000, "13909": 1635419761000, "13935": 1635758364000, "13950": 1635774467000, "13954": 1635836519000, "13978": 1635928733000, "13985": 1635939642000, "14016": 1636002496000, "14030": 1636037863000, "14031": 1636084911000, "14044": 1636103985000, "14050": 1636110670000, "14069": 1636359403000, "14102": 1636451876000, "14103": 1636454311000, "14116": 1636467533000, "14126": 1636521105000, "14130": 1636536512000, "14134": 1636539648000, "14136": 1636551535000, "14137": 1636556115000, "14138": 1636611392000, "14144": 1636623033000, "14159": 1636635349000, "14163": 1636641311000, "14171": 1636695324000, "14175": 1636708610000, "14179": 1636717130000, "14247": 1637071035000, "14287": 1637135329000, "14292": 1637155763000, "14302": 1637561949000, "14308": 1637574832000, "14337": 1637738227000, "14338": 1637744114000, "14396": 1637919368000, "14398": 1637923009000, "14413": 1638159174000, "14466": 1638442153000, "14505": 1638528234000, "14511": 1638791815000, "14516": 1638852447000, "14571": 1638863959000, "14575": 1638868773000, "14587": 1638884209000, "14594": 1638944253000, "14595": 1638951832000, "14601": 1638971614000, "14616": 1639028856000, "14621": 1639036630000, "14654": 1639123738000, "14655": 1639128080000, "14718": 1639557577000, "14741": 1639642355000, "14753": 1639661325000, "14755": 1639721029000, "14768": 1639735805000, "14772": 1639746862000, "14781": 1641189380000, "14784": 1641192752000, "14789": 1641204095000, "14815": 1641298481000, "14828": 1641386384000, "14859": 1641397404000, "14863": 1641450626000, "14865": 1641464960000, "14869": 1641543195000, "14888": 1641563728000, "14891": 1641802002000, "14942": 1641894364000, "14963": 1641908380000, "14979": 1641979969000, "14986": 1641989511000, "15005": 1642005564000, "15008": 1642053783000, "15009": 1642055178000, "15012": 1642083192000, "15014": 1642085380000, "15018": 1642138125000, "15023": 1642416157000, "15027": 1642572031000, "15039": 1642581122000, "15050": 1642608038000, "15061": 1642657906000, "15086": 1643019494000, "15092": 1643092417000, "15360": 1643980430000, "15368": 1644239793000, "15372": 1644332348000, "15374": 1644399287000, "15375": 1644408632000, "15376": 1644414506000, "15398": 1644487976000, "15406": 1644555392000, "15417": 1644589621000, "15423": 1644829822000, "15424": 1644843067000, "15427": 1644851384000, "15439": 1644920075000, "15453": 1644932740000, "15460": 1644936813000, "15465": 1644987344000, "15468": 1644998384000, "15475": 1645005762000, "15481": 1645013085000, "15487": 1645019662000, "15488": 1645024342000, "15491": 1645084448000, "15539": 1645695370000, "15576": 1646039690000, "15586": 1646039544000, "15643": 1646143052000, "15654": 1646149343000, "15664": 1646209236000, "15665": 1646209735000, "15669": 1646227383000, "15671": 1646231986000, "15679": 1646318443000, "15698": 1646719861000, "15720": 1646745181000, "15739": 1646811820000, "15744": 1646980014000, "15747": 1647001958000, "15795": 1647258034000, "15799": 1647262259000, "15812": 1647325432000, "15813": 1647325570000, "15822": 1647413770000, "15829": 1647495632000, "15863": 1647950904000, "15899": 1648027563000, "15903": 1648031279000, "15914": 1648136599000, "15921": 1648188147000, "15965": 1648470215000, "15972": 1648473166000, "15975": 1648527538000, "15976": 1648528703000, "15978": 1648537115000, "15980": 1648548462000, "16007": 1649243648000, "16012": 1649256619000, "16013": 1649309213000, "16014": 1649325781000, "16019": 1649335709000, "16026": 1649395273000, "16051": 1649663088000, "16055": 1649680870000, "16058": 1649767832000, "16073": 1649843045000, "16093": 1650517861000, "16097": 1650534170000, "16121": 1650879553000, "16130": 1650893089000, "16133": 1650943089000, "16135": 1650960966000, "16137": 1650962976000, "16147": 1651052845000, "16620": 1654076127000, "16948": 1658206934000, "16952": 1658221122000, "16967": 1658301487000, "17117": 1659616602000}, "params": {"cpu": ["2 Core CPU"], "machine": ["cloud-container"], "os": ["Ubuntu"], "ram": ["7GB"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"cpu": "2 Core CPU", "machine": "cloud-container", "os": "Ubuntu", "ram": "7GB", "python": "3.8", "branch": "main"}], "benchmarks": {"bin.Bin1d.time_bin_table": {"code": "class Bin1d:\n    def time_bin_table(self, nbin):\n        make_binned(self.table, edges=[self.x])\n\n    def setup(self, nbin):\n        self.table = sc.data.table_xyz(50_000_000)\n        self.x = sc.linspace(dim='x', start=0, stop=1, num=nbin + 1, unit='m')", "min_run_count": 2, "name": "bin.Bin1d.time_bin_table", "number": 0, "param_names": ["nbin"], "params": [["1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384", "32768", "65536", "131072", "262144", "524288"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "f2e8b7683e6f274b5c269ec1c7a174683ff1e5473dce21dc0d446fbd5611fa96", "warmup_time": -1}, "bin.Bin2dRebinLongDim.time_outer": {"code": "class Bin2dRebinLongDim:\n    def time_outer(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da, edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()", "min_run_count": 2, "name": "bin.Bin2dRebinLongDim.time_outer", "number": 0, "param_names": ["nbin"], "params": [["1024", "2048", "4096", "8192", "16384", "32768"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "1db06b58771967cf21e92bf8379883351566a21bf2c9d58e770cdd72f76b0e8c", "warmup_time": -1}, "bin.Bin2dRebinLongDim.time_outer_transposed": {"code": "class Bin2dRebinLongDim:\n    def time_outer_transposed(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da.transpose(), edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()", "min_run_count": 2, "name": "bin.Bin2dRebinLongDim.time_outer_transposed", "number": 0, "param_names": ["nbin"], "params": [["1024", "2048", "4096", "8192", "16384", "32768"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "e3ff4414681f32b14c9786f7a99dc590aef5ee4c8fa523862e0c0942729a800b", "warmup_time": -1}, "bin.Bin2dRebinLongDim.time_outer_transposed_copied": {"code": "class Bin2dRebinLongDim:\n    def time_outer_transposed_copied(self, nbin):\n        x = sc.linspace(dim='x', start=0, stop=1, num=nbin - 1, unit='m')\n        make_binned(self.da_transposed, edges=[x])\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])\n        self.da_transposed = self.da.transpose().copy()", "min_run_count": 2, "name": "bin.Bin2dRebinLongDim.time_outer_transposed_copied", "number": 0, "param_names": ["nbin"], "params": [["1024", "2048", "4096", "8192", "16384", "32768"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "85fba314140d0326d27e2598f5b3e5f065bb19a10e6af335f7a3cd449dd6f44e", "warmup_time": -1}, "binned.Binned1d.time_bins_concat": {"code": "class Binned1d:\n    def time_bins_concat(self, nevent, nbin):\n        self.da.bins.concat('x')\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)", "min_run_count": 2, "name": "binned.Binned1d.time_bins_concat", "number": 0, "param_names": ["nevent", "nbin"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "58c2343f62de1ac6146796595db09fec02bea13031193a0dc2db479eda0f2f16", "warmup_time": -1}, "binned.Binned1d.time_bins_constituents": {"code": "class Binned1d:\n    def time_bins_constituents(self, nevent, nbin):\n        self.da.bins.constituents\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)", "min_run_count": 2, "name": "binned.Binned1d.time_bins_constituents", "number": 0, "param_names": ["nevent", "nbin"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "750e40adcdd72cc2ba4061a49ec5082369d1e0007cf4a6fa4c0ffa95c415c3a5", "warmup_time": -1}, "binned.Binned1d.time_bins_mean": {"code": "class Binned1d:\n    def time_bins_mean(self, nevent, nbin):\n        self.da.bins.sum()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)", "min_run_count": 2, "name": "binned.Binned1d.time_bins_mean", "number": 0, "param_names": ["nevent", "nbin"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a4fd83ba82fac7a334c9382b83a22ef41dfbd5af0fcc407dabcbde58e122c5e1", "warmup_time": -1}, "binned.Binned1d.time_bins_size": {"code": "class Binned1d:\n    def time_bins_size(self, nevent, nbin):\n        self.da.bins.size()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)", "min_run_count": 2, "name": "binned.Binned1d.time_bins_size", "number": 0, "param_names": ["nevent", "nbin"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2bb7233e85b8bd6176ab5bb5bf778a5a2cffe8744976d46fc4daa774e164676d", "warmup_time": -1}, "binned.Binned1d.time_bins_sum": {"code": "class Binned1d:\n    def time_bins_sum(self, nevent, nbin):\n        self.da.bins.sum()\n\n    def setup(self, nevent, nbin):\n        self.da = sc.data.binned_x(nevent, nbin)", "min_run_count": 2, "name": "binned.Binned1d.time_bins_sum", "number": 0, "param_names": ["nevent", "nbin"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3998bb34213db7e17d90d3fe088ea8ac4f40755facef0382b95bd2cac9de4822", "warmup_time": -1}, "binned.Binned2dConcat.time_bins_concat": {"code": "class Binned2dConcat:\n    def time_bins_concat(self, nbin):\n        self.da.bins.concat('x')\n\n    def setup(self, nbin):\n        nx = 100000\n        binned = sc.data.binned_x(nevent=2 * nx, nbin=nx)\n        y = sc.linspace(dim='y', start=0, stop=1, num=nbin + 1, unit='m')\n        self.da = make_binned(binned, edges=[y])", "min_run_count": 2, "name": "binned.Binned2dConcat.time_bins_concat", "number": 0, "param_names": ["nbin"], "params": [["1", "2", "4", "8", "16", "32", "64", "128"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "1fa0539c5e163c0e7bb178b1629a5be1eace65f92b465df93aec2a99b452e66b", "warmup_time": -1}, "binned.Binned2dConcatInner.time_bins_concat_long_outer": {"code": "class Binned2dConcatInner:\n    def time_bins_concat_long_outer(self, nbin):\n        self.da.bins.concat('y')\n\n    def setup(self, nbin):\n        binned = sc.data.binned_x(nevent=2 * nbin, nbin=nbin)\n        y = sc.linspace(dim='y', start=0, stop=1, num=2, unit='m')\n        self.da = make_binned(binned, edges=[y])", "min_run_count": 2, "name": "binned.Binned2dConcatInner.time_bins_concat_long_outer", "number": 0, "param_names": ["nbin"], "params": [["1024", "2048", "4096", "8192", "16384", "32768"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300.0, "type": "time", "unit": "seconds", "version": "d8550afeba7f4310e732bc4dbac947dacaec5a77d5ea60958843557342b198b3", "warmup_time": -1}, "binned.Lookup.time_create_bool": {"code": "class Lookup:\n    def time_create_bool(self):\n        self.hist_bool.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_bool, 'x')\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_create_bool", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1182a2942aed726d1bc92909be00866c3ea1eac9459a504b53246f0641f92b58", "warmup_time": -1}, "binned.Lookup.time_create_float64": {"code": "class Lookup:\n    def time_create_float64(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_float, 'x')\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_create_float64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bcac8b0b4e48546f141dc655f062ec75192fea135396eb81585618ca85e6823a", "warmup_time": -1}, "binned.Lookup.time_create_int64": {"code": "class Lookup:\n    def time_create_int64(self):\n        self.hist_int.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_int, 'x')\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_create_int64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6ac169426d24b6de5f50022fcb693f1490368765c266dfa9a677dcac507329f8", "warmup_time": -1}, "binned.Lookup.time_map_bool": {"code": "class Lookup:\n    def time_map_bool(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_bool, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_bool", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "52ae6b4a6ec40680b0565241c5065b5b6726e2214893e82e19509ea5f980ebec", "warmup_time": -1}, "binned.Lookup.time_map_float64": {"code": "class Lookup:\n    def time_map_float64(self):\n        self.hist_float.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_float, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_float64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3a36700bc9804e956819ca6b3831dd4ae60300b5cea1e8b46fdf117e6cc84362", "warmup_time": -1}, "binned.Lookup.time_map_int64": {"code": "class Lookup:\n    def time_map_int64(self):\n        self.hist_int.coords['x'].values[-1] *= 1.1\n        sc.lookup(self.hist_int, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_int64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dcac5c6baf23074b3de01ea6214f0458b9d32cc7f5646df4fadc8063eb3c47e2", "warmup_time": -1}, "binned.Lookup.time_map_linspace_bool": {"code": "class Lookup:\n    def time_map_linspace_bool(self):\n        sc.lookup(self.hist_bool, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_linspace_bool", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "240bd46a792d73efe9cf9905b7fd26e1a85ca2b2788f661173bd429898a4978d", "warmup_time": -1}, "binned.Lookup.time_map_linspace_float64": {"code": "class Lookup:\n    def time_map_linspace_float64(self):\n        sc.lookup(self.hist_float, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_linspace_float64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0beede7cfa10b2e9c12193ab9ee2eb9bfa431622fa2ae231a6d324d6a5b2bb94", "warmup_time": -1}, "binned.Lookup.time_map_linspace_int64": {"code": "class Lookup:\n    def time_map_linspace_int64(self):\n        sc.lookup(self.hist_int, 'x')[self.data.bins.coords['x']]\n\n    def setup(self):\n        self.data = sc.data.binned_x(100_000_000, 10000)\n        x = sc.linspace(dim='x', start=0.0, stop=1.0, num=1_000_001, unit='m')\n        groups = sc.arange(dim='x', start=0, stop=1_000_000) // 1000 % 5\n        self.hist_bool = sc.DataArray(data=groups.astype('bool'), coords={'x': x})\n        self.hist_int = sc.DataArray(data=groups, coords={'x': x})\n        self.hist_float = sc.DataArray(data=groups.astype('float64'), coords={'x': x})", "min_run_count": 2, "name": "binned.Lookup.time_map_linspace_int64", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "411f722513494faafbe56d0a9d93e87f711d407cedc3569dd1f51372b3fb2a6f", "warmup_time": -1}, "variable.Variable.time_deep_copy": {"code": "class Variable:\n    def time_deep_copy(self):\n        self.var1.copy()\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])", "min_run_count": 2, "name": "variable.Variable.time_deep_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e8d07ae15799fc765744c9b499c153a20769e8a2e9211ba350432d54ef3f8377", "warmup_time": -1}, "variable.Variable.time_shallow_copy": {"code": "class Variable:\n    def time_shallow_copy(self):\n        self.var1.copy(deep=False)\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])", "min_run_count": 2, "name": "variable.Variable.time_shallow_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "834ba6db7f3808ba6ba4c6c9675ee517874b3cede7bbc4655c0163483f650689", "warmup_time": -1}, "variable.Variable.time_variable_inplace_operation": {"code": "class Variable:\n    def time_variable_inplace_operation(self):\n        self.var1 += self.var2\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])", "min_run_count": 2, "name": "variable.Variable.time_variable_inplace_operation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0a2175047c37cce1ece6d7212dc1815784c3d8c33009b768f16c9ddd57b394d", "warmup_time": -1}, "variable.Variable.time_variable_non_inplace_operation": {"code": "class Variable:\n    def time_variable_non_inplace_operation(self):\n        self.var1 + self.var2\n\n    def setup(self):\n        self.var1 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])\n        self.var2 = sc.array(dims=['x'], values=[1, 2, 3, 4, 5])", "min_run_count": 2, "name": "variable.Variable.time_variable_non_inplace_operation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "590cde73c39ca2fc0ad1ca736a819ef4714a68013b7687dc2c390a6a2ce54af0", "warmup_time": -1}}, "machines": {"cloud-container": {"cpu": "2 Core CPU", "machine": "cloud-container", "os": "Ubuntu", "ram": "7GB", "version": 1}}, "tags": {"0.1": 3395, "0.10.0": 14594, "0.10.1": 14601, "0.11.0": 15009, "0.11.1": 15012, "0.12.0": 15488, "0.12.1": 15586, "0.12.2": 15669, "0.12.3": 15679, "0.12.4": 15812, "0.13.0": 15980, "0.13.1": 16013, "0.14.0": 16620, "0.14.1": 16948, "0.15.0": 16952, "0.15.1": 16967, "0.2": 4861, "0.3.0": 5946, "0.3.1": 5956, "0.4.0": 7040, "0.5.0": 9530, "0.6.0": 10574, "0.6.1": 11257, "0.7.0": 12106, "0.7.1": 12695, "0.7.2": 13485, "0.8.0": 13422, "0.8.1": 13427, "0.8.2": 13454, "0.8.3": 13487, "0.8.4": 13504, "0.8.5": 13701, "0.9.0": 14136, "dataset-v1": 124, "dataset-v2": 320, "prototype-convolutions": 11677, "prototype-user-defined-kernels": 12908, "v0.0.1": 1625, "v0.0.2": 3242, "v0.1": 3390}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}